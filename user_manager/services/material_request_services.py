import json
import os
from datetime import datetime, timedelta

from io import BytesIO
from docxtpl import DocxTemplate

from model.patient import Patient
from model.address import Address
from model.users import Users
from model.material_requests import MaterialRequests

from utils.send_mail import send_product_request_email
from utils.constants import PDR_PROTOCOL_NUMBER


class MaterialRequestObj:
    def __init__(self):
        self.loggedin_user = ""
        self.today = datetime.now().strftime("%m/%d/%Y")
        self.needed_by_date = None
        self.sequence_number = ""
        self.recipient_firstname = ""
        self.recipient_lastname = ""
        self.site_name = ""
        self.address = ""
        self.city = ""
        self.state = ""
        self.zip = ""
        self.country = ""
        self.phone = ""
        self.email = ""
        self.dp_qty = 0
        self.sp_qty = 0
        self.mdu_qty = 0
        self.sk_qty = 0
        self.spk_qty = 0
        self.rmk_qty = 0
        self.pa_qty = 0
        self.ht_qty = 0
        self.ifu_qty = 0
        self.al_qty = 0
        self.psk_qty = 0
        self.su_qty = 0

    def to_dict(self, data):
        for key in data:
            setattr(self, key, data[key])

class MaterialRequestService:
    def __init__(self):
        pass

    def send_initial_product_request(self, logged_in_user_email: str,
                                     patient: Patient,
                                     patient_email: str) -> bool:
        print("SENDING INITIAL PRODUCT REQUEST....................")
        req = MaterialRequestObj()
        user_obj = Users.find_by_email(logged_in_user_email)
        req.loggedin_user = user_obj.first_name + " " + user_obj.last_name

        material_requests_db = MaterialRequests()
        material_requests_db.num_items = 1
        material_requests_db.request_date = datetime.now()
        material_requests_db.requested_user_id = user_obj.id
        obj_from_db = material_requests_db.save_to_db()

        time = datetime.now() + timedelta(days=4)
        req.needed_by_date = time.strftime("%m/%d/%Y")

        #Sequence number gets generated by the database
        req.sequence_number = obj_from_db.request_number

        req.site_name = "N/A"
        # Find the patient name
        user = Users.find_by_id(patient.user_id)
        req.recipient_firstname = user.first_name
        req.recipient_lastname = user.last_name
        req.phone = user.phone_number
        req.email = patient_email

        # Since this is the first request, the product will be shipped to a patient.
        address = Address.find_by_id(patient.shipping_address_id)
        req.address = address.street_address_1
        req.city = address.city
        req.zip = address.postal_code
        req.country = address.country
        req.state = address.state

        req.dp_qty = 2
        req_json = json.dumps(req.__dict__)
        print("------------------------")
        print(req_json)

        self.__send_request(req.__dict__, logged_in_user_email)
        return True

    def __send_request(self, request_data, logged_in_user_email):
        template_file = os.path.join(os.getcwd(), "templates", "PRD_template.docx")
        print("template file...." + str(template_file))
        content = self.__doc_from_template(template_file, request_data)
        csv_file = self.__generate_excel(request_data)
        send_product_request_email(content.read(), csv_file.read(), logged_in_user_email)

    def __doc_from_template(self, template_file, data):
        template = DocxTemplate(template_file)
        template.render(data)

        docx_stream = BytesIO()
        template.save(docx_stream)
        docx_stream.seek(0)

        return docx_stream

    def __generate_excel(self, data_dict):
        import csv
        from io import StringIO
        header = ["Transaction #", "Requested By", "Date Requested", "Date Needed",
                  "Protocol #", "Recipient Shipping Information", "Recipient Phone #",
                  "Recipient Email Address", "Qty: 900-000031", "Qty: 900-000044",
                  "Qty: 900-00036", "Qty: 900-00049", "Qty: 900-00050", "Qty: 900-00051",
                  "Qty: trimmer", "Qty: IFU", "Qty: Adhesive Laminate", "Qty: Packed Starter Kit",
                  "Qty: Shipping Materials", "Qty: Return Labels", "Special Instructions"]

        data = MaterialRequestObj()
        data.to_dict(data_dict)
        address = data.address + ", " + data.city + ", " + data.state + ", " + data.zip + ", " + data.country
        csv_data = [data.sequence_number, data.loggedin_user, data.today, data.needed_by_date,
                    PDR_PROTOCOL_NUMBER, address, data.phone, data.email, " ", " ",
                    " ", " ", " ", " ", " ", " ", " ", " "," ", " ", " "]
                    #TODO: Update this once the protocol template is finalized
        f = StringIO()
        csv.writer(f).writerow(header)
        csv.writer(f).writerow(csv_data)
        f.seek(0)
        return f



